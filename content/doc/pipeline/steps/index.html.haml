---
layout: documentation
title: "Pipeline Steps Reference"
---

- steps_dir = File.expand_path(File.dirname(__FILE__))
%p
  The following plugins offer Pipeline-compatible steps. Each plugin link offers
  more information about the parameters for each step.

%p
  Read more about how to
  integrate steps into your Pipeline in the
  %a{:href => "/doc/book/pipeline/syntax/#declarative-steps"} Steps
  section of the
  %a{:href => "/doc/book/pipeline/syntax"} Pipeline Syntax
  page.

.input-group.col-lg-6.mb-3
  %input#filter.form-control.rounded{:name => "search", :placeholder => "Filter Steps", :type => "search", :autofocus => "true"}

%div
  %ul
    - sections_from(steps_dir).sort_by { |it| it[0].downcase }.each do |section, file, url, children|
      %li.search
        %a{:href => url}
          = section
        %ul
          - children.each do |section, file, sect_url, sect_children|
            %li.search
              %a{:href => "#{url}##{sect_url}"}
                = section

%hr/

.container
= partial ('_feedback-footer.html')

:javascript
    function slowClear() {
      $(".search").filter(function() {
        setTimeout(() => $(this).show(), 20);
      });
    }

    function debounce(func) {
      let timer;
      return (...args) => {
        clearTimeout(timer);
        timer = setTimeout(() => { func.apply(this, args); }, 500);
      };
    }

    $("#filter").keyup(debounce(() => {
      var input = $("#filter").val().toLowerCase();
      if($("#filter").val() === "") {
        slowClear();
      } else {
        $(".search").filter(function() {
          $(this).toggle($(this).text().toLowerCase().indexOf(input) > -1);
        });
      }
    }));

    $("#filter").on("search", function() {
      if($("#filter").val() === "") {
        slowClear();
      }
    });