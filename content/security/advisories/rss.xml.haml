!!! XML
%rss(version="2.0"
     xmlns:content="https://purl.org/rss/1.0/modules/content/"
     xmlns:atom="http://www.w3.org/2005/Atom")

  :ruby
    require 'asciidoctor'
    advisories_dir = File.expand_path(File.dirname(__FILE__) + '/../advisory')
    pages_by_path = site.pages.map { |p| [p.source_path, p] }.to_h
    adocs = Dir.glob(File.join(advisories_dir, '*.{ad,adoc}'))

  %channel
    %title
      Jenkins Security Advisories
    %link
      https://www.jenkins.io/security/advisories/
    %atom:link(href="#{absolute_link(page.url)}" rel="self" type="application/rss+xml")
    %description
      Security advisories published by the Jenkins project
    %lastBuildDate
      #{DateTime.now.rfc822}
    - advisories = Dir.glob(File.join(advisories_dir, '202*.{ad,adoc}'))
    - advisories.sort.reverse_each do |advisory|
      - page = pages_by_path[advisory]

      %item
        %title
          = page.title
        %date
          #{(DateTime.strptime(page.title,"Jenkins Security Advisory %Y-%m-%d") + 0.5).rfc822}
        %link
          = "https://www.jenkins.io#{ expand_link(page.url) }"
        %description
          - if page.issues or page.index_details
            - if page.index_details
              = Asciidoctor.convert(page.index_details, safe: :safe).encode(xml: :text)
            - else
              = "<ul>".encode(xml: :text)
              - if page.core
                = "<li>Affects Jenkins Core</li>".encode(xml: :text)
              - plugins = get_plugins(page.issues).uniq.sort { |x,y| (site._generated[:update_center].plugins[x.name]&.title&.downcase || x.name&.downcase) <=> (site._generated[:update_center].plugins[y.name]&.title&.downcase || y.name&.downcase) }
              - plugins.each do | plugin |
                - if site._generated[:update_center].plugins[plugin.name]
                  = "<li>Affects plugin: <a href='https://plugins.jenkins.io/#{plugin.name}'>#{site._generated[:update_center].plugins[plugin.name].title}</a></li>".encode(xml: :text)
                - else
                  = "<li>Affects plugin: #{plugin.title || plugin.name}".encode(xml: :text)
              - components = page.issues.collect { |issue| issue.components }.flatten.keep_if { |c| c }
              - components.each do | component |
                = "<li>Affects #{component.title || component.name}</li>"
              = "</ul>".encode(xml: :text)
