---
layout: simplepage
title: "Jenkins 2 Overview"
---

:css
  #download DT {
    font-size: 1.2em;
    font-weight: bold;
    margin: 0.2em 0;
    padding: 0;
  }
  #download DD IMG {
    vertical-align: middle;
  }
  #download DL {
    margin: 0;
  }
  #highlights DT {
    font-weight: bold;
    margin-top: 1em;
  }
  #highlights DD {
    padding-left: 1em;
    margin-bottom: 1em;
  }
  #previewdownloads {
    float: right;
    width: 200px;
    padding: 1em;
    background: #d3d7cf;
    margin-left: 1em;
  }

- if legacy?
  %h1
    Jenkins 2 Overview
- else
  :css
    #previewdownloads {
      float: right;
      width: 20rem;
      padding: 1em;
      background: #f9f9f9;
      margin-left: 1em;
    }

%p
  - # Putting this section into markdown to make it easier to mark up
  :markdown
    Jenkins is an open source automation server with an unparalleled plugin
    ecosystem to support practically every tool as part of your delivery
    pipelines. Whether your goal is [continuous
    integration](https://en.wikipedia.org/wiki/Continuous_integration),
    [continuous delivery](https://en.wikipedia.org/wiki/Continuous_delivery) or
    something else entirely, Jenkins can help automate it.

    Jenkins 2 brings Pipeline as code, a new setup experience and other UI
    improvements all while maintaining total backwards compatibility with
    existing Jenkins installations.

%h2
  Highlights of Jenkins 2:
%ul
  %strong
    %li
      %a{:href => '#pipelines'}
        Built-in support for delivery pipelines.
    %li
      %a{:href => '#ux'}
        Improved usability.
    %li
      %a{:href => '#compat'}
        Fully backwards compatible.

%br/
%hr/

%h2
  %a{:name => 'pipelines'}
    Pipelines

%h3
  Problem

%p
  As organizations of all types seek to deliver high quality software faster,
  their use of Jenkins is extending beyond just continuous integration (CI) to
  continuous delivery (CD).  In order to implement continuous delivery, teams
  need a flexible way to model, orchestrate and visualize their entire delivery
  pipeline.

%h3
  Solution

%p
  Jenkins 2 supports delivery pipelines as a first-class entity. The Pipeline
  plugin introduces a domain-specific language (DSL) that helps Jenkins users to
  model their software delivery pipelines as code, which can be checked in and
  version-controlled along with the rest of their project's source code.

%img{:src => '/images/hello-world-pipeline.png', :title => 'A simple build/test pipeline'}/

%p
  The expressive domain-specific language makes it easier and faster to create
  a simple "build, test and deploy" pipeline or build advanced pipelines. The
  end result is improved productivity for teams.
  %a{:href => '/doc/pipeline' }
    Learn more about the Pipeline plugin.

%h3
  Key Features and Benefits of Pipelines

%h4
  Pipeline as Code

%ul
  %li
    Easily define simple and complex pipelines through the DSL in a <code> Jenkinsfile</code>.
  %li
    Pipeline as code provides a common language to help teams (e.g. Dev and Ops) work together.
  %li
    Easily share pipelines between teams by storing common "steps" in shared repositories.

%h4
  Pipeline Stage View

%ul
  %li
    A new interface makes it easy to visualize the progress across an entire pipeline.

%p{:style => 'text-align: center'}
  %a{:href => '/images/pipeline-stage-view.png', :target => '_blank'}
    %img{:src => '/images/pipeline-stage-view.png', :title => 'A pipeline stage view', :width => '80%'}


%h4
  Durable

%ul
  %li
    Pipelines are long-lasting and can survive infrastructure outages.


%h4
  Built-in support for Git, GitHub branches

%ul
  %li
    Each feature branch can define its own delivery pipeline, which Jenkins can detect, automatically managing Pipelines when branches are created or deleted.

%hr/

%h2
  %a{:name => 'ux'}
    Improved Usability

%h3
  Problem

%p
  The abundant plugin ecosystem means that new Jenkins users must navigate
  through long lists of plugins to find the most suitable plugins to match
  their needs. Without any "batteries included" to address the most common needs,
  getting started with Jenkins can be an intimidating experience.


%h3
  Solution

%p
  For new users, Jenkins 2 starts up with suggested plugins to get them
  started with the right set of tools to use Jenkins effectively from day one.

%p
  There are a number of user interface improvements, such as the
  improved job configuration page, to make configuring jobs easier.


%h3
  Key Features and Benefits of Improved Usability


%h4
  New "Getting Started" experience

%ul
  %li Start with a set of suggested plugins that match the most common needs.

%p{:style => 'text-align: center'}
  %a{:href => '/images/getting-started-setup.png', :target => '_blank'}
    %img{:src => '/images/getting-started-setup.png', :title => 'Getting started with Jenkins 2', :width => '60%'}/

%h4
  Redesigned "Create Item" page

%ul
  %li
    The "Create Item" page has been redesigned to include icons for job types.
    Once you have a larger number of item types to choose from, the page will group item types by category.

%p{:style => 'text-align: center'}
  %a{:href => '/images/2.0-create-item.png', :target => '_blank'}
    %img{:src => '/images/2.0-create-item.png', :title => 'The new item creation page', :width => '80%'}/

%h4
  New Job Configuration page

%ul
  %li
    Tabs at the top of the job configuration page let you quickly jump to various sections on the form.
    The redesigned form elements make it easy to tell which options are related.

%p{:style => 'text-align: center'}
  %a{:href => '/images/2.0-config-dialog.png', :target => '_blank'}
    %img{:src => '/images/2.0-config-dialog.png', :title => 'The new job configuration dialog', :width => '80%'}/

%hr/


%h2
  %a{:name => 'compat'}
    Backward Compatible

%p
  Jenkins 2 is a drop-in replacement of the Jenkins 1.x series of releases
  and fully backward compatible. There is practically no reason <em>not</em> to
  upgrade!

%div.admonitionblock.important
  %table
    %tbody
      %tr
        %td.icon
          %i.fa.icon-important{:title => 'Important'}
        %td.content
          Jenkins 2 now requires Servlet 3.1 to run. If you're not using the embedded Winstone-Jetty, make sure your container supports Servlet 3.1 (e.g. Tomcat 8) before upgrading.

%div.admonitionblock.important
  %table
    %tbody
      %tr
        %td.icon
          %i.fa.icon-important{:title => 'important'}
        %td.content
          Jenkins 2 no longer supports AJP with the embedded Winstone-Jetty container, so if you're using Jenkins with a reverse proxy, please make sure it uses HTTP before upgrading.



%a{:name => 'feedback'}

%h2
  Give us feedback!
%p
  We're very interested in your feedback on what you think of Jenkins 2.

%ul
  %li
    If you use Twitter, you can leave us some feedback
    %a{:href => 'https://twitter.com/intent/tweet?text=@jenkinsci%20I%20think%20%23jenkins2%20is%20'}
      on Twitter.
