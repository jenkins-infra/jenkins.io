---
layout: simplepage
title: "Jenkins 2.0"
---

:css
  #download DT {
    font-size: 1.2em;
    font-weight: bold;
    margin: 0.2em 0;
    padding: 0;
  }
  #download DD IMG {
    vertical-align: middle;
  }
  #download DL {
    margin: 0;
  }
  #highlights DT {
    font-weight: bold;
    margin-top: 1em;
  }
  #highlights DD {
    padding-left: 1em;
    margin-bottom: 1em;
  }
  #previewdownloads {
    float: right;
    width: 200px;
    padding: 1em;
    background: #d3d7cf;
    margin-left: 1em;
  }


%h1
  Jenkins 2.0 Overview

%p
  - # Putting this section into markdown to make it easier to mark up
  :markdown
    Jenkins is an open source automation server with an unparalleled plugin
    ecosystem to support practically every tool as part of your delivery
    pipelines. Whether your goal is [continuous
    integration](https://en.wikipedia.org/wiki/Continuous_integration),
    [continuous delivery](https://en.wikipedia.org/wiki/Continuous_delivery) or
    something else entirely, Jenkins can help automate it.

    Jenkins 2.0 brings Pipeline as code, a new setup experience and other UI
    improvements all while maintaining total backwards compatibility with
    existing Jenkins installations.


%div#previewdownloads
  %h2
    Preview Downloads


  %dl#download
    %dt
      Download the .war

    %dd
      %div
        %a{:href => 'http://mirrors.jenkins-ci.org/war-rc/2.0/jenkins.war'}
          jenkins.war

    %dt
      Download native packages

    %dd.release-block-platforms
      %div
        %img{:src => "/images/os/win_other.png"}
          %a.release-block-soft{:href => "http://mirrors.jenkins-ci.org/windows-rc/jenkins-2.0.zip"}
            Windows
      %div
        %img{:src => "/images/os/ubuntu.png"}
          %a.release-block-soft{:href => "http://pkg.jenkins-ci.org/debian-rc/binary/jenkins_2.0_all.deb"}
            Ubuntu/Debian
      %div
        %img{:src => "/images/os/redhat.png"}
          %a.release-block-soft{:href => "http://pkg.jenkins-ci.org/redhat-rc/jenkins-2.0-1.1.noarch.rpm"}
            Red Hat/Fedora
      %div
        %img{:src => "/images/os/os_macosx.png"}
          %a.release-block-soft{:href => "http://mirrors.jenkins-ci.org/osx-rc/jenkins-2.0.pkg"}
            Mac OS X
      %div
        %img{:src => "/images/os/opensuse.png"}
          %a.release-block-soft{:href => "http://pkg.jenkins-ci.org/opensuse-rc/jenkins-2.0-1.2.noarch.rpm"}
            openSUSE

    %dt Docker

    %dd#release-block-platforms
      %div
        %a.release-block-soft{:href => "https://hub.docker.com/r/jenkinsci/jenkins/"}
          %tt docker pull jenkinsci/jenkins:2.0-alpha-3


%h2
  Highlights of 2.0:
%ul
  %strong
    %li
      %a{:href => '#pipelines'}
        Built-in support for delivery pipelines.
    %li
      %a{:href => '#ux'}
        Improved usability.
    %li
      %a{:href => '#compat'}
        Fully backwards compatible.

%br/
%hr/

%h2
  %a{:name => 'pipelines'}
    Pipelines

%h3
  Problem

%p
  As organizations of all types seek to deliver high quality software faster,
  their use of Jenkins is extending beyond just continuous integration (CI) to
  continuous delivery (CD).  In order to implement continuous delivery, teams
  need a flexible way to model, orchestrate and visualize their entire delivery
  pipeline.

%h3
  Solution

%p
  Jenkins 2.0 supports delivery pipelines as a first-class entity. The Pipeline
  plugin introduces a domain-specific language (DSL) that helps Jenkins users to
  model their software delivery pipelines as code, which can be checked in and
  version-controlled along with the rest of their project's source code.

%img{:src => '/images/hello-world-pipeline.png', :title => 'A simple build/test pipeline'}/

%p
  The expressive domain-specific language makes it easier and faster to create
  a simple "build, test and deploy" pipeline or build advanced pipelines. The
  end result is improved productivity for teams.

%h3
  Key Features and Benefits of Pipelines

%h4
  Pipeline as Code

%ul
  %li
    Easily define simple and complex pipelines through the DSL in a <code> Jenkinsfile</code>.
  %li
    Pipeline as code provides a common language to help teams (e.g. Dev and Ops) work together.
  %li
    Easily share pipelines between teams by storing common "steps" in shared repositories.

%h4
  Pipeline Stage View

%ul
  %li
    A new interface makes it easy to visualize the progress across an entire pipeline.

%a{:href => '/images/pipeline-stage-view.png', :target => '_blank'}
  %img{:src => '/images/pipeline-stage-view.thumb.png', :title => 'A pipeline stage view'}


%h4
  Durable

%ul
  %li
    Pipelines are long-lasting and can survive infrastructure outages.


%h4
  Built-in support for Git, GitHub branches

%ul
  %li
    Each feature branch can define its own delivery pipeline, which Jenkins can detect, automatically managing Pipelines when branches are created or deleted.

%hr/

%h2
  %a{:name => 'ux'}
    Improved Usability

%h3
  Problem

%p
  The abundant plugin ecosystem means that new Jenkins users must navigate
  through long lists of plugins to find the most suitable plugins to match
  their needs. Without any "batteries included" to address the most common needs,
  getting started with Jenkins can be an intimidating experience.


%h3
  Solution

%p
  For new users, Jenkins 2.0 starts up with suggested plugins to get them
  started with the right set of tools to use Jenkins effectively from day one.

%p
  There are a number of user interface improvements, such as the
  improved job configuration page, to make configuring jobs easier.


%h3
  Key Features and Benefits of Improved Usability


%h4
  New "Getting Started" experience

%ul
  %li Start with a set of suggested plugins that match the most common needs.

%a{:href => '/images/getting-started-setup.png', :target => '_blank'}
  %img{:src => '/images/getting-started-setup.png', :title => 'Getting started with Jenkins 2.0',
  :width => 550}/

%h4
  New Job Configuration page

%ul
  %li
    Easily configure jobs with a tabbed interface. You no longer need to go
    through the entire set of configuration choices to change a few values.

%a{:href => '/images/2.0-config-dialog.png', :target => '_blank'}
  %img{:src => '/images/2.0-config-dialog.thumb.png', :title => 'The new job configuration dialog in 2.0', :width => 550}/

%hr/


%h2
  %a{:name => 'compat'}
    Backward Compatible

%p
  Jenkins 2.0 is a drop-in replacement of the Jenkins 1.x series of releases
  and fully backward compatible. There is practically no reason <em>not</em> to
  upgrade once 2.0 is released.

%h2 More changes coming!

%p
  We're not done yet! There will be more changes towards Jenkins 2.0, and we'll
  keep updating this page to highlight them.

%p
  We have more details of
  %a{:href => "https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+2.0"}
    the 2.0 plan
  on our wiki!



%h2
  Give us feedback!
%p
  We're very interested in your feedback on what you think of the Jenkins 2.0 preview releases.

%p
  To experience Jenkins 2.0 properly, we recommend you set up
  %a{:href => 'https://wiki.jenkins-ci.org/display/JENKINS/Administering+Jenkins'}
    a different Jenkins home directory
  \. This way, you'll both get to try the new setup, and keep your production instance
  safe from possible issues.

%ul
  %li
    If you use Twitter, you can leave us some feedback
    %a{:href => 'https://twitter.com/intent/tweet?text=@jenkinsci%20I%20think%20%23jenkins2%20is%20'}
      on Twitter
  %li
    Our
    %a{:href => 'http://groups.google.com/group/jenkinsci-users/topics'}
      jenkinsci-users
    mailing list is available for feedback in
    %a{:href => 'https://groups.google.com/d/msg/jenkinsci-users/fEWFVUj0UVY/GbG0ChvkIgAJ'}
      %strong
        this thread
  %li
    Of course, this is a preview release, so if you find any issues please report them to our
    %a{:href => 'https://wiki.jenkins-ci.org/display/JENKINS/Issue+Tracking'}
      our issue tracker
    in the "JENKINS" project.
