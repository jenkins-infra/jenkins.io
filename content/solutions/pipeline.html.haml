---
layout: solution
title: "Pipeline as Code with Jenkins"
---

:markdown
  The default interaction model with Jenkins, historically, has been very web UI
  driven, requiring users to manually create jobs, then manually fill in the
  details through a web browser. This requires additional effort to create and
  manage jobs to test and build multiple projects, it also keeps the
  configuration of a job to build/test/deploy separate from the actual code being
  built/tested/deployed. This prevents users from applying their existing CI/CD
  best practices to the job configurations themselves.


  # Pipeline

  With the introduction of the [Pipeline
  plugin](https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin),
  users now can implement a project's entire build/test/deploy pipeline
  in a `Jenkinsfile` and store that alongside their code, treating their
  pipeline as another piece of code checked into source control.

  The Pipeline plugin was inspired by the [Build Flow
  plugin](https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin)
  but aims to improve upon some concepts explored by Build Flow with
  features like:

    * the ability to suspend/resume of executing jobs.
    * checking the pipeline definition into source control (`Jenkinsfile`)
    * support for extending the domain specific language with additional,
    organization specific steps, via the "[global
    library](https://www.cloudbees.com/blog/jenkins-workflow-using-global-library-implement-re-usable-function-call-secured-http-endpoint)" feature

  In an adjacent space is the [Job DSL
  plugin](https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin)
  which is worth mentioning as well.


  ## Getting Started

  * The [Pipeline
    plugin](https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin)
    has a fairly comprehensive
    [tutorial](https://github.com/jenkinsci/workflow-plugin/blob/master/TUTORIAL.md)
    checked into its source tree.
  * [Overview of Continuous Delivery with Workflow](http://documentation.cloudbees.com/docs/cookbook/_continuous_delivery_with_jenkins_workflow.html)
  * [DZone Refcard](https://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow)
  * [Pipeline as code "cook book"](http://documentation.cloudbees.com/docs/cookbook/pipeline-as-code.html)

  ## Additional resources

  * [Pipeline Plugin page](https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin)
  * [Plugins compatible with Workflow](https://github.com/jenkinsci/workflow-plugin/blob/master/COMPATIBILITY.md)
  * [Stack Overflow "jenkins-workflow" tag](http://stackoverflow.com/questions/tagged/jenkins-workflow)
  * [Examples/snippets repository](https://github.com/jenkinsci/workflow-examples)


  ## Presentations

  The presentations below were given by [Jesse Glick](https://github.com/jglick), author of the [Pipeline Plugin page](https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin)


%center
  %iframe{:width => 560, :height => 315, :frameborder => 0,
        :src => 'https://www.youtube-nocookie.com/embed/VkIzoU7zYzE'}

:markdown
  * [2014 presentation](https://www.youtube.com/watch?v=gpaV6x9QwDo) (with [slides](https://www.cloudbees.com/sites/default/files/2014-0618-Boston-Jesse_Glick-Workflow.pdf))

  Other presentations:

  * [Pimp your Continuous Delivery Pipeline with Jenkins workflow (W-JAX 14)](http://www.slideshare.net/cloudbees/pimp-your-continuous-delivery-pipeline-with-jenkins-workflow-wjax-14) by [Cyrille Le Clerc](https://github.com/cyrille-leclerc)
