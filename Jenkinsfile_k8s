pipeline {
  agent {
    kubernetes {
      inheritFrom 'jnlp-linux'
      yaml '''
apiVersion: "v1"
kind: "Pod"
metadata:
  labels:
    jenkins: "agent"
    job: "jenkins-io"
spec:
  tolerations:
    - key: "os"
      operator: "Equal"
      value: "linux"
      effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                  - linux
  restartPolicy: "Never"
  containers:
    - name: "node"
      image: "node:16.13.1"
      securityContext:
        privileged: false
      tty: true
      command:
      - cat
    - name: "ruby"
      image: "ruby:2.6.9"
      securityContext:
        privileged: false
      tty: true
      command:
      - cat
    - name: "blobxfer"
      image: "mcr.microsoft.com/blobxfer:1.9.1"
      command:
      - cat
      securityContext:
        privileged: false
      tty: true
      '''
    }
  }

  environment {
    TZ = "UTC"
    USE_LOCAL_NODE = "true"
    USE_LOCAL_RUBY = "true"
    HOME = "/tmp"
  }

  triggers {
    cron("${env.BRANCH_NAME == 'master' ? 'H/30 * * * *' : ''}")
  }

  options {
    timeout(time: 60, unit: 'MINUTES')
    ansiColor('xterm')
    disableConcurrentBuilds()
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')
  }

  stages {
    stage('NPM Install') {
      steps {
        container('node') {
          sh 'npm install'
        }
      }
    }

    stage('Bundle Install') {
      steps {
        container('ruby') {
          // throw errors if Gemfile has been modified since Gemfile.lock
          sh 'bundle config --global frozen 1'
          sh 'bundle install'
        }
      }
    }

    stage('Build') {
      steps {
        container('node') {
          sh 'make assets'
        }
        container('ruby') {
          sh 'make fetch'
        }
        container('ruby') {
          sh 'bundle exec awestruct --generate --verbose --source-dir=content'
        }
      }
    }

    /*
    stage('Deploy to azure') {
      when {
        branch "master"
      }
      environment {
        BLOBXFER_STORAGEACCOUNTKEY = credentials('BLOBXFER_STORAGEACCOUNTKEY')
      }
      steps {
        container('blobxfer') {
          sh('''
              blobxfer upload \
            --local-path build/_site \
            --storage-account-key $BLOBXFER_STORAGEACCOUNTKEY \
            --storage-account prodjenkinsio \
            --remote-path jenkinsio \
            --recursive \
            --mode file \
            --skip-on-md5-match \
            --file-md5 \
            --connect-timeout 30
          ''')
        }
      }
    }
    */

    stage('Deploy master to netlify') {
      when {
        branch "master"
      }
      environment {
        NETLIFY_AUTH_TOKEN = credentials('netlify-auth-token')
      }
      steps {
        container('node') {
          script {
            def netlifySite = readJSON(text: sh(script: 'npx netlify sites:list --json', returnStdout: true).trim()).find { it.name == "jenkins-io-site-pr" }
            env.NETLIFY_SITE_ID = netlifySite['site_id']
            env.NETLIFY_DOMAIN = netlifySite['default_domain']
          }
          sh('npx netlify deploy --message "Deploy" -d build/_site')
        }
      }
    }
    stage('Deploy to preview site') {
      when {
        changeRequest target: 'master'
      }
      environment {
        NETLIFY_AUTH_TOKEN = credentials('netlify-auth-token')
      }
      steps {
        container('node') {
          script {
            def netlifySite = readJSON(text: sh(script: 'npx netlify sites:list --json', returnStdout: true).trim()).find { it.name == "jenkins-io-site-pr" }
            env.NETLIFY_SITE_ID = netlifySite['site_id']
            env.NETLIFY_DOMAIN = netlifySite['default_domain']
          }
          sh('npx netlify deploy --message "Preview deploy for ${CHANGE_ID}" --alias "deploy-preview-${CHANGE_ID}" -d build/_site')
          script {
            def body = """<!-- DEPLOY PREVIEW -->‚úîÔ∏è Deploy Preview for jenkins-io-site-pr ready!\n\nüòé Browse the preview: https://deploy-preview-${CHANGE_ID}--jenkins-io-site-pr.netlify.app""".stripIndent()
            def comment = pullRequest.comments.toList().find { it.body.contains("<!-- DEPLOY PREVIEW -->") }
            if (comment != null) {
              pullRequest.editComment(comment.id, body)
            } else {
              pullRequest.comment(body)
            }
          }
        }
      }
    }
  }
}
