/*
 * This build.gradle file is to be used for generating the jenkins.io site
 */
buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2'
        }
    }
    dependencies {
        classpath "org.ajoberstar:gradle-git:1.2.0"
        classpath "com.github.jruby-gradle:jruby-gradle-plugin:[1.1.4,2.0)"
        /*
         * not available on jcenter, only the Gradle plugins portal, this
         * plugin also wasn't published with the proper maven metadata so we
         * must fetch the version specifically for it
         */
        classpath 'gradle.plugin.com.craigburke.gradle:bower-installer-gradle:2.4.1'
    }
}
apply plugin: 'com.github.jruby-gradle.base'
apply plugin: 'com.craigburke.bower-installer'

import org.ajoberstar.grgit.Grgit
import com.github.jrubygradle.JRubyExec

ext.gitRef = Grgit.open('.')?.head()?.abbreviatedId
ext.siteOutputDir = "${buildDir}/_site"
ext.legacyOutputDir = "${buildDir}/_legacy"

description = 'Build for generating jenkins.io'
version = "2.0.${System.env.BUILD_NUMBER ?: '0'}+${ext.gitRef}"
defaultTasks 'assemble', 'archive'


configurations {
    asciidoctor
    externalFetcher
}

dependencies {
    /* used for primary site generation */
    asciidoctor 'rubygems:awestruct:[0.5.7,0.6)'
    /* ensure we pull in a more recent version of asciidoctor */
    asciidoctor 'rubygems:asciidoctor:[1.5.4,2.0)'
    /* used for legacy markdown template processing via tilt */
    asciidoctor 'rubygems:kramdown:[1.9.0,2.0)'
    /* contains a number of useful awestruct extensions */
    asciidoctor 'rubygems:awestruct-ibeams:[0.2.1,1.0)'
    /* 1.2.0 causes 'C extensions are not supported' error. It's known that
        JRuby's C extensions are deprecated */
    asciidoctor 'rubygems:eventmachine:[1.0, 1.2)'

    /* used for processing haml templates (haml.info) */
    asciidoctor 'rubygems:haml:[4.0.7,5.0)'
    /* used for processing inline liquid templating */
    asciidoctor 'rubygems:liquid:[3.0.6,4.0)'

    /* used for syntax highlighting */
    asciidoctor 'rubygems:coderay:[1.1.0,2.0)'

    /* needed for clean HTTP accesses */
    externalFetcher 'rubygems:faraday:[0.9.2,1.0)'
    externalFetcher 'rubygems:faraday_middleware:[0.9.2,1.0)'
}

/* for fetching javascript assets that we need for building the legacy and new
 * versions of the site
 */
bower {
    /* weird syntax is weird */

    /* jQuery and jQuery UI are both used by the "legacy" download picker and
     * can likely go away once the legacy site is sunsetted
     */
    'jquery' ('1.11.3') {
        source 'dist/**'
    }
    'jquery-ui' ('1.11.4') {
        source '**/*.js'
        source 'themes/base/**' >> 'themes/base/'
    }

    /* needed for jenkins.io */

    'bootstrap' ('4.0.0-alpha.2') {
        source 'dist/**'
    }

    'ekko-lightbox' ('3.3.3') {
        source 'dist/**'
    }

    'tether' ('1.1.1') {
        source 'dist/**'
    }
}


task fetchExternalResources(type: JRubyExec) {
    group 'Site'
    description 'Fetch external resources which need to be compiled into the site'
    script "${projectDir}/scripts/fetch-external-resources"
    configuration 'externalFetcher'
    inputs.source file("${projectDir}/scripts/fetch-external-resources")
}

task compileLegacyContent(type: JRubyExec) {
    group 'Site'
    description 'Compile the site using the awestruct CLI'
    dependsOn 'fetchExternalResources'
    script 'awestruct'
    environment 'LEGACY' : true
    scriptArgs '--generate', '--verbose',
                /* forcefully set the site.base_url since the config is not
                 * being respected
                 */
                '--url', 'https://jenkins-ci.org',
                '--source-dir', "${projectDir}/${contentDir}",
                '--output-dir', project.ext.legacyOutputDir
    /* without the --force option, awestruct is not smart enough to regenerate
     * files based on includes */
    configuration 'asciidoctor'
    inputs.source fileTree(projectDir)
                    .include("${contentDir}/**/*.adoc")
                    .include("${contentDir}/**/*.haml")
                    .include("${contentDir}/**/*.md")
}

task compileContent(type: JRubyExec) {
    group 'Site'
    description 'Compile the site using the awestruct CLI'
    dependsOn 'fetchExternalResources'
    script 'awestruct'
    scriptArgs '--generate', '--verbose',
                /* forcefully set the site.base_url since the config is not
                 * being respected
                 */
                '--url', 'https://jenkins-ci.org',
                '--source-dir', "${projectDir}/${contentDir}",
                '--output-dir', project.ext.siteOutputDir
    /* without the --force option, awestruct is not smart enough to regenerate
     * files based on includes */
    configuration 'asciidoctor'
    inputs.source fileTree(projectDir)
                    .include("${contentDir}/**/*.adoc")
                    .include("${contentDir}/**/*.haml")
                    .include("${contentDir}/**/*.md")
}

task prepareJavaScripts {
    group 'Site'
    description 'Fetch JavaScript/CSS dependencies for generating the site'
    dependsOn bowerInstall

    doLast {
        [project.ext.siteOutputDir, project.ext.legacyOutputDir].each {
            def assetsDir = file("${it}/assets")
            assetsDir.mkdirs()

            copy {
                from "${projectDir}/src/assets"
                into assetsDir
            }
        }
    }
}

task assemble {
    group 'Site'
    description 'Assemble the full site'
    dependsOn fetchExternalResources,
                compileContent,
                compileLegacyContent,
                prepareJavaScripts
}

task archiveBeta(type: Zip) {
    def computedDirName = "jenkins.io-${project.version}.beta"

    group 'Site'
    description 'Create a zip archive of the site for deployment'
    dependsOn assemble
    archiveName "${computedDirName}.zip"
    into(computedDirName) { from project.ext.siteOutputDir }

    File targetDir = file("${buildDir}/archives")
    targetDir.mkdirs()
    destinationDir = targetDir
}

task archiveLegacy(type: Zip) {
    def computedDirName = "jenkins.io-${project.version}"

    group 'Site'
    description 'Create a zip archive of the site for deployment'
    dependsOn assemble
    archiveName "${computedDirName}.zip"
    into(computedDirName) { from project.ext.legacyOutputDir }

    File targetDir = file("${buildDir}/archives")
    targetDir.mkdirs()
    destinationDir = targetDir
}

task archive {
    group 'Site'
    description 'Create a zip archive of the site for deployment'
    dependsOn archiveLegacy, archiveBeta
}

task run(type:Exec) {
    description 'inspect the generated build/_site locally through http://localhost:8000/'
    workingDir 'build/_site'
    commandLine 'python','-m','SimpleHTTPServer'
}

def defineDevTask(name, body) {
    task(name, type: Exec) {
        description "Run in the development mode with live reloading. Point your browser to http://localhost:4242/"
        workingDir 'content'
        commandLine 'awestruct', '--dev', '--output-dir', '../build/_site'
        body.delegate = delegate
        body()
    }
}

defineDevTask('dev') {}
defineDevTask('dev-legacy') { environment 'LEGACY', 'true' }
